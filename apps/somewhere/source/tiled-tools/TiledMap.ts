import {z} from 'zod';

import {tiledLayerSchema} from './TiledLayer.js';
import {tiledPropertySchema} from './TiledProperty.js';
import {tiledTilesetSchema} from './TiledTileset.js';

export const tiledMapSchema = z.union([
  z.object({
    backgroundcolor: z.string().optional(),
    class: z.string().optional(),
    compressionlevel: z.number().default(-1),
    height: z.number(),
    hexsidelength: z.number().optional(),
    infinite: z.boolean(),
    layers: z.array(tiledLayerSchema),
    nextlayerid: z.number(),
    nextobjectid: z.number(),
    orientation: z.literal('hexagonal'),
    parallaxoriginx: z.number().default(0),
    parallaxoriginy: z.number().default(0),
    properties: z.array(tiledPropertySchema).optional(),
    staggeraxis: z.string().optional(),
    staggerindex: z.string().optional(),
    tiledversion: z.string(),
    tileheight: z.number(),
    tilesets: z.array(tiledTilesetSchema),
    tilewidth: z.number(),
    type: z.literal('map'),
    version: z.string(),
    width: z.number(),
  }),
  z.object({
    backgroundcolor: z.string().optional(),
    class: z.string().optional(),
    compressionlevel: z.number().default(-1),
    height: z.number(),
    infinite: z.boolean(),
    layers: z.array(tiledLayerSchema),
    nextlayerid: z.number(),
    nextobjectid: z.number(),
    orientation: z.literal('isometric'),
    parallaxoriginx: z.number().default(0),
    parallaxoriginy: z.number().default(0),
    properties: z.array(tiledPropertySchema).optional(),
    tiledversion: z.string(),
    tileheight: z.number(),
    tilesets: z.array(tiledTilesetSchema),
    tilewidth: z.number(),
    type: z.literal('map'),
    version: z.string(),
    width: z.number(),
  }),
  z.object({
    backgroundcolor: z.string().optional(),
    class: z.string().optional(),
    compressionlevel: z.number().default(-1),
    height: z.number(),
    infinite: z.boolean(),
    layers: z.array(tiledLayerSchema),
    nextlayerid: z.number(),
    nextobjectid: z.number(),
    orientation: z.literal('orthogonal'),
    parallaxoriginx: z.number().default(0),
    parallaxoriginy: z.number().default(0),
    properties: z.array(tiledPropertySchema).optional(),
    renderorder: z.enum(['left-down', 'left-up', 'right-down', 'right-up']).default('right-down'),
    tiledversion: z.string(),
    tileheight: z.number(),
    tilesets: z.array(tiledTilesetSchema),
    tilewidth: z.number(),
    type: z.literal('map'),
    version: z.string(),
    width: z.number(),
  }),
  z.object({
    backgroundcolor: z.string().optional(),
    class: z.string().optional(),
    compressionlevel: z.number().default(-1),
    height: z.number(),
    infinite: z.boolean(),
    layers: z.array(tiledLayerSchema),
    nextlayerid: z.number(),
    nextobjectid: z.number(),
    orientation: z.literal('staggered'),
    parallaxoriginx: z.number().default(0),
    parallaxoriginy: z.number().default(0),
    properties: z.array(tiledPropertySchema).optional(),
    staggeraxis: z.string().optional(),
    staggerindex: z.string().optional(),
    tiledversion: z.string(),
    tileheight: z.number(),
    tilesets: z.array(tiledTilesetSchema),
    tilewidth: z.number(),
    type: z.literal('map'),
    version: z.string(),
    width: z.number(),
  }),
]);

export type TiledMap = z.infer<typeof tiledMapSchema>;
